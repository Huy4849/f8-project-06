@use "sass:math";
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1320px
);

$gutters: (
  0: 0,
  1: 0.25,
  2: 0.5,
  3: 1,
  4: 1.5,
  5: 3,
);

$grid-column: 12;
$grid-gutter-width: 30px;

%gutter-padding{
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-y) * 0.5);
}

.container-fluid{
    --grid-gutter-x: #{$grid-gutter-width * 0.5};
    --grid-gutter-y: #{$grid-gutter-width * 0.5};

    width: 100%;
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

.container{
    @extend .container-fluid;
}

.col{
    flex: 1 0;
    @extend %gutter-padding;
}

.row{
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-right: $grid-gutter-width * 0.5;
    margin-left: $grid-gutter-width * 0.5;
    &[class*=row-cols] > *,
    [class*=col-]{
        flex: 0 0 auto;
        @extend %gutter-padding;
    }

    > *{
        margin-top: calc(var(--grid-gutter-y));
    }
}

@mixin make-gutter($infix){
    @each $i, $ratio in $gutters{
        .g#{$infix}-#{$i}{
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}

@mixin make-media-query($dimension, $bypass){
    @if($bypass){
        @content;
    }
    @else{
        @media (min-width: $dimension){
            @content;
        }
    }
}

@mixin make-row-columns($infix){
    @for $i from 1 through $grid-column{
        .row-cols#{$infix}-#{$i} > *{
            width: math.div(100%, $i);
        }
    }
}

@mixin make-columns($infix){
    @for $i from 1 through $grid-column{
        .col#{$infix}-#{$i}{
            width: math.div(100%, $grid-column) * $i;
        }
    }
}

@mixin make-offset($infix){
    @for $i from 0 to $grid-column{
        .offset#{$infix}-#{$i}{
            margin-left: if($i > 0, math.div(100%, $grid-column) * $i, 0);
        }
    }
}

@each $breakpoint, $dimension in $grid-breakpoints{
    $max-width: map-get($container-max-widths, $breakpoint);
    $is-xs: $breakpoint==xs;
    $infix: if($is-xs, "", -#{$breakpoint});


    @include make-media-query($dimension, $is-xs){
        .container{
            max-width: $max-width;
        }

        @include make-row-columns($infix);

        @include make-columns($infix);

        @include make-offset($infix);

        @include make-gutter($infix);
    }
}